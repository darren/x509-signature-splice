#!/bin/bash

DISABLE_LINTER=0
# Latest ghr is broken on Go 1.8.x and earlier
# TODO: maybe an older version would work
DISABLE_GHR=1

if [[ "${TRAVIS_GO_VERSION}." = "1.6."* ]]; then
  DISABLE_LINTER=1
fi

if [[ "${TRAVIS_GO_VERSION}." = "1.5."* ]]; then
  DISABLE_LINTER=1
fi

if [[ "${DISABLE_GHR}" = "1" ]]; then
  echo "ghr is disabled in this job due to ancient Go version."
fi

if [[ "${DISABLE_LINTER}" = "1" ]]; then
  echo "gometalinter and gox are disabled in this job due to ancient Go version."
fi

if [[ "${DISABLE_GHR}" = "0" ]]; then
  travis_retry go get -v github.com/tcnksm/ghr
fi

if [[ "${DISABLE_LINTER}" = "0" ]]; then
  travis_retry go get -v github.com/mitchellh/gox
  travis_retry go get -v gopkg.in/alecthomas/gometalinter.v2
fi

go test -v ./...
RESULT=$?

echo Done tests with exit code $RESULT
if [ "$RESULT" != "0" ]; then
  return $RESULT
fi

if [[ "${DISABLE_LINTER}" = "1" ]]; then
  return 0
fi

# Static analysis

gometalinter.v2 --install

# maligned is disabled because of these comments:
# * https://www.reddit.com/r/golang/comments/3lahav/aligncheck_helps_to_find_inefficiently_packed/cv4u4lg/
# * https://www.reddit.com/r/golang/comments/3lahav/aligncheck_helps_to_find_inefficiently_packed/cv5wnom/
# gofmt is disabled because it's a subset of goimports.
# test is disabled because we already do tests earlier in the script.
# The --exclude line disables warnings on the portion of x509 that is copied
# verbatim from the Go standard library.
echo ""
echo "gometalinter critical (should be no warnings):"
gometalinter.v2 --enable-all \
--disable=deadcode \
--disable=dupl \
--disable=errcheck \
--disable=gas \
--disable=gochecknoglobals \
--disable=gocyclo \
--disable=gofmt \
--disable=golint \
--disable=gosec \
--disable=ineffassign \
--disable=lll \
--disable=maligned \
--disable=megacheck \
--disable=nakedret \
--disable=staticcheck \
--disable=test \
--disable=unconvert \
--disable=unparam \
--disable=unused \
--concurrency=3 \
--deadline=10m \
--exclude='^x509/([a-wy-z]|x509.go|x509_[a-rt-z])' \
./...
STATICRESULT1=$?

echo ""
echo "gometalinter non-critical (warnings expected):"
gometalinter.v2 --enable-all \
--disable=maligned \
--disable=gofmt \
--disable=test \
--concurrency=3 \
--deadline=10m \
--exclude='^x509/([a-wy-z]|x509.go|x509_[a-rt-z])' \
./...
STATICRESULT2=$?

# Test cross-compilation. The binaries produced are also used for release
# upload in after_success if this is a release tag.

echo Cross-compiling releases...
mkdir -p "$GOPATH/releasing/idist" "$GOPATH/releasing/dist"

GOX_PARA=3

REPOS="github.com/$TRAVIS_REPO_SLUG/..."

# non-cgo crosscompile
gox -parallel=$GOX_PARA -osarch 'darwin/386 darwin/amd64 linux/386 linux/amd64 linux/arm linux/arm64 linux/ppc64 linux/ppc64le freebsd/386 freebsd/amd64 freebsd/arm openbsd/386 openbsd/amd64 netbsd/386 netbsd/amd64 netbsd/arm dragonfly/amd64 solaris/amd64 windows/386 windows/amd64' -output "$GOPATH/releasing/idist/ncdns-$TRAVIS_TAG-{{.OS}}_{{.Arch}}/bin/{{.Dir}}" $REPOS
RESULT2=$?

echo non-cgo crosscompile exited with code $RESULT2
echo critical gometalinter exited with code $STATICRESULT1
echo non-critical gometalinter exited with code $STATICRESULT2

if [ "$RESULT2" != "0" ]; then
  return $RESULT2
fi
if [ "$STATICRESULT1" != "0" ]; then
  return $STATICRESULT1
fi
